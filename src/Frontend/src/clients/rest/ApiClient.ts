/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import ClientBase from "./base/ClientBase";

export class BluetoothClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    bluetooth(hardwareAddress: string, body?: NearbyBluetooth[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Bluetooth/{hardwareAddress}";
        if (hardwareAddress === undefined || hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' must be defined.");
        url_ = url_.replace("{hardwareAddress}", encodeURIComponent("" + hardwareAddress));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBluetooth(_response);
        });
    }

    protected processBluetooth(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param hardwareAddress (optional) 
     * @return Success
     */
    studentProximities(hardwareAddress?: string | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/Bluetooth/StudentProximities?";
        if (hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' cannot be null.");
        else if (hardwareAddress !== undefined)
            url_ += "hardwareAddress=" + encodeURIComponent("" + hardwareAddress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStudentProximities(_response);
        });
    }

    protected processStudentProximities(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * @return Success
     */
    allProximities(): Promise<GuidGuidIEnumerableKeyValuePair[]> {
        let url_ = this.baseUrl + "/api/Bluetooth/AllProximities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAllProximities(_response);
        });
    }

    protected processAllProximities(response: Response): Promise<GuidGuidIEnumerableKeyValuePair[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <GuidGuidIEnumerableKeyValuePair[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GuidGuidIEnumerableKeyValuePair[]>(<any>null);
    }
}

export class ClassroomClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @return Success
     */
    classroom(): Promise<string[]> {
        let url_ = this.baseUrl + "/api/Classroom";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClassroom(_response);
        });
    }

    protected processClassroom(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <string[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export class DebugClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @param studentId (optional) 
     * @param event (optional) 
     * @return Success
     */
    addEvent(studentId?: string | undefined, event?: UrgentEvent | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Debug/AddEvent?";
        if (studentId === null)
            throw new Error("The parameter 'studentId' cannot be null.");
        else if (studentId !== undefined)
            url_ += "studentId=" + encodeURIComponent("" + studentId) + "&";
        if (event === null)
            throw new Error("The parameter 'event' cannot be null.");
        else if (event !== undefined)
            url_ += "event=" + encodeURIComponent("" + event) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddEvent(_response);
        });
    }

    protected processAddEvent(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addStudent(body?: Student | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Debug/AddStudent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddStudent(_response);
        });
    }

    protected processAddStudent(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @param hardwareAddress (optional) 
     * @return Success
     */
    setHardwareAddress(id?: string | undefined, hardwareAddress?: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Debug/SetHardwareAddress?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' cannot be null.");
        else if (hardwareAddress !== undefined)
            url_ += "hardwareAddress=" + encodeURIComponent("" + hardwareAddress) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetHardwareAddress(_response);
        });
    }

    protected processSetHardwareAddress(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    deleteStudent(id?: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Debug/DeleteStudent?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteStudent(_response);
        });
    }

    protected processDeleteStudent(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class StudentsClient extends ClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @return Success
     */
    students(): Promise<Student[]> {
        let url_ = this.baseUrl + "/api/Students";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStudents(_response);
        });
    }

    protected processStudents(response: Response): Promise<Student[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Student[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Student[]>(<any>null);
    }

    /**
     * @param hardwareAddress (optional) 
     * @param activity (optional) 
     * @return Success
     */
    activityPUT(hardwareAddress?: string | undefined, activity?: Activity | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Students/Activity?";
        if (hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' cannot be null.");
        else if (hardwareAddress !== undefined)
            url_ += "hardwareAddress=" + encodeURIComponent("" + hardwareAddress) + "&";
        if (activity === null)
            throw new Error("The parameter 'activity' cannot be null.");
        else if (activity !== undefined)
            url_ += "activity=" + encodeURIComponent("" + activity) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivityPUT(_response);
        });
    }

    protected processActivityPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param hardwareAddress (optional) 
     * @param activity (optional) 
     * @return Success
     */
    vocalActivityPUT(hardwareAddress?: string | undefined, activity?: VocalActivity | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Students/VocalActivity?";
        if (hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' cannot be null.");
        else if (hardwareAddress !== undefined)
            url_ += "hardwareAddress=" + encodeURIComponent("" + hardwareAddress) + "&";
        if (activity === null)
            throw new Error("The parameter 'activity' cannot be null.");
        else if (activity !== undefined)
            url_ += "activity=" + encodeURIComponent("" + activity) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "PUT",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVocalActivityPUT(_response);
        });
    }

    protected processVocalActivityPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    activityGET(hardwareAddress: string): Promise<Activity> {
        let url_ = this.baseUrl + "/api/Students/Activity/{hardwareAddress}";
        if (hardwareAddress === undefined || hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' must be defined.");
        url_ = url_.replace("{hardwareAddress}", encodeURIComponent("" + hardwareAddress));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processActivityGET(_response);
        });
    }

    protected processActivityGET(response: Response): Promise<Activity> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Activity>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Activity>(<any>null);
    }

    /**
     * @return Success
     */
    vocalActivityGET(hardwareAddress: string): Promise<VocalActivity> {
        let url_ = this.baseUrl + "/api/Students/VocalActivity/{hardwareAddress}";
        if (hardwareAddress === undefined || hardwareAddress === null)
            throw new Error("The parameter 'hardwareAddress' must be defined.");
        url_ = url_.replace("{hardwareAddress}", encodeURIComponent("" + hardwareAddress));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVocalActivityGET(_response);
        });
    }

    protected processVocalActivityGET(response: Response): Promise<VocalActivity> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <VocalActivity>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<VocalActivity>(<any>null);
    }
}

export enum Activity {
    Sitting = "Sitting",
    Walking = "Walking",
    Running = "Running",
    Playing = "Playing",
    Fighting = "Fighting",
    Falling = "Falling",
}

export interface EventHistory {
    student?: Student;
    event?: UrgentEvent;
    date?: Date;
}

export interface GuidGuidIEnumerableKeyValuePair {
    readonly key?: string;
    readonly value?: string[] | undefined;
}

export interface NearbyBluetooth {
    hardwareAddress?: string | undefined;
    rssi?: number;
    name?: string | undefined;
}

export interface Student {
    id?: string;
    deviceHardwareAddress?: string | undefined;
    name: string;
    age: number;
    teachers?: Teacher[] | undefined;
}

export interface Teacher {
    id?: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    students?: Student[] | undefined;
}

export enum UrgentEvent {
    Falling = "Falling",
    Crying = "Crying",
    PeePeePooPoo = "PeePeePooPoo",
    Dying = "Dying",
}

export enum VocalActivity {
    Talking = "Talking",
    Shouting = "Shouting",
    Crying = "Crying",
    Silent = "Silent",
    Laughing = "Laughing",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}